{
  "hash": "e80b6cc48e6b32cec1ba0d8c05fe9148",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to use Positron's Connections Pane with DuckDB\"\ndate: 2025-07-10\ndescription: \"Positron's Connections Pane makes it really convenient to work with most types of databases—here's how to connect to lighting fast DuckDB files.\"\n\nimage: img/connection-duckdb-nicer-data.png\ntwitter-card: \n    image: \"img/connection-duckdb-nicer-data.png\"\nopen-graph: \n    image: \"img/connection-duckdb-nicer-data.png\"\n\ncategories:\n  - positron\n  - databases\n  - duckdb\n\nformat:\n  html:\n    include-in-header:\n      - text: |\n          <style type=\"text/css\">\n          div.sourceCode > pre.sourceCode.bash::before {\n            content: 'Terminal (sh)';\n            display: block;\n            text-align: left;\n            font-size: 1em;\n            margin-bottom: 7px;\n            border-bottom: #4c4c4c 1px solid;\n            padding-left: 4.25px;\n            padding-bottom: 5px;\n            color: #aaaaaa;\n          }\n\n          div.sourceCode > pre.sourceCode.r::before {\n            content: 'R';\n            display: block;\n            text-align: left;\n            font-size: 1em;\n            margin-bottom: 7px;\n            border-bottom: #4c4c4c 1px solid;\n            padding-left: 4.25px;\n            padding-bottom: 5px;\n            color: #aaaaaa;\n          }\n          </style>\n\ndoi: 10.59350/w37d8-vj489\ncitation: true\n---\n\n\n\nOne more [Positron](https://positron.posit.co/)-related post! It's a quick one, just to highlight one feature I think is really neat and helpful: the [Connections Pane](https://positron.posit.co/connections-pane.html).\n\nIn a newer research project I'm working on, I have geocoded data for every foreign aid project run by most donor countries since 1989. This involves millions of rows and nearly a thousand columns across three CSV files, totalling 3.3 GB. R can load this data, but it takes a long time and slows down the session substantially (and often crashes R entirely).\n\nFortunately there's a good solution for this huge data. [DuckDB](https://duckdb.org/) is a lightning fast database system that works really well with R. The DuckDB file that I've made for the foreign aid data compresses things substantially—it only takes up 600 MB on the disk instead of 3.3 GB. It also lets me query the huge data using either SQL commands or with {dplyr} functions, and I can load subsets of the huge data into R really quickly.\n\n\n## DuckDB, {DBI}, and the difficulty of discerning data in a database\n\nHere's a quick little example showing the general process with some toy data. I'll create a little `.duckdb` file on the disk named `example_database.duckdb`—I could also make a temporary in-memory database by naming the file `\":memory:\"`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\ndb_file <- \"example_database.duckdb\"\n\n# Connect to the database\ncon <- DBI::dbConnect(duckdb::duckdb(), db_file)\n```\n:::\n\n\n\n\nNext I'll add some stuff to it:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Add stuff to the database\ncopy_to(con, penguins, name = \"penguins\", overwrite = TRUE, temporary = FALSE)\ncopy_to(con, gapminder::gapminder, name = \"gapminder\", overwrite = TRUE, temporary = FALSE)\ncopy_to(con, ggplot2::mpg, name = \"mpg\", overwrite = TRUE, temporary = FALSE)\ncopy_to(con, ggplot2::diamonds, name = \"diamonds\", overwrite = TRUE, temporary = FALSE)\n```\n:::\n\n\nAnd then I'll close the connection:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nDBI::dbDisconnect(con)\n```\n:::\n\n\nThat worked, but it's really hard to see if it did anything. The database file *does* contain stuff—it's 1.6 MB now:\n\n``` bash\n❯ ls -lh example_database.duckdb\n# Permissions Size User   Date Modified    Name\n# .rw-r--r--@ 1.6M andrew 2025-07-10 12:13 example_database.duckdb\n```\n\n…and I can connect to the database with R and get data out of it:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncon <- DBI::dbConnect(duckdb::duckdb(), db_file)\n\n# Get stuff out of the database\nadelie_query <- tbl(con, I(\"penguins\")) |> \n  filter(species == \"Adelie\")\n\n# Check it out! It's SQL!\nshow_query(adelie_query)\n## <SQL>\n## SELECT q01.*\n## FROM (FROM penguins) q01\n## WHERE (species = 'Adelie')\n\n# Actually run the query\npenguins_from_db <- adelie_query |> \n  collect()\npenguins_from_db\n## # A tibble: 152 × 8\n##    species island    bill_len bill_dep flipper_len body_mass sex     year\n##    <fct>   <fct>        <dbl>    <dbl>       <int>     <int> <fct>  <int>\n##  1 Adelie  Torgersen     39.1     18.7         181      3750 male    2007\n##  2 Adelie  Torgersen     39.5     17.4         186      3800 female  2007\n##  3 Adelie  Torgersen     40.3     18           195      3250 female  2007\n##  4 Adelie  Torgersen     NA       NA            NA        NA <NA>    2007\n##  5 Adelie  Torgersen     36.7     19.3         193      3450 female  2007\n##  6 Adelie  Torgersen     39.3     20.6         190      3650 male    2007\n##  7 Adelie  Torgersen     38.9     17.8         181      3625 female  2007\n##  8 Adelie  Torgersen     39.2     19.6         195      4675 male    2007\n##  9 Adelie  Torgersen     34.1     18.1         193      3475 <NA>    2007\n## 10 Adelie  Torgersen     42       20.2         190      4250 <NA>    2007\n## # ℹ 142 more rows\n\nDBI::dbDisconnect(con)\n```\n:::\n\n\n…but there's not an easy way to check what's actually going on in there. I only know there's a table named `penguins` in there because I just made it. \n\nDuckDB provides a helpful browser-based UI that you can load from the terminal like this:\n\n```bash\n❯ duckdb -ui example_database.duckdb\n```\n\nThis gives you a notebook where you can write SQL commands, which I find less helpful because I typically interact with the database with {dplyr}—I really only use DuckDB for fast data storage and fast data access. Most importantly, though, it gives you a sidebar that shows all the tables inside the database, and you can preview the stuff inside:\n\n![The DuckDB browser-based UI](img/duckdb-ui.png){width=\"100%\"}\n\nThis all works fine for remembering what's in the database, BUT it's always a bit of a hassle because you can't run commands from R as long as the the UI is open. You can only connect to a database once, so you'll get this error:\n\n```{.r}\ncon <- DBI::dbConnect(duckdb::duckdb(), db_file)\n#> Error in `.local()`:\n#> ! rapi_startup: Failed to open database: {\"exception_type\":\"IO\",\"exception_message\":\"Could not \n#> set lock on file \\\"example_database.duckdb\\\": Conflicting lock is held in /opt/homebrew/Cellar/\n#> duckdb/1.2.2/bin/duckdb (PID 48019) by user andrew. \n#> See also https://duckdb.org/docs/stable/connect/concurrency\",\"errno\":\"35\"}\n```\n\n::: {.callout-note}\n#### Disconnect when done!\n\nWhen you're done with the browser UI, you need to type `.quit` from the DuckDB terminal to close the connection:\n\n``` bash\n❯ duckdb -ui example_database.duckdb\n┌──────────────────────────────────────┐\n│                result                │\n│               varchar                │\n├──────────────────────────────────────┤\n│ UI started at http://localhost:4213/ │\n└──────────────────────────────────────┘\nv1.2.2 7c039464e4\nEnter \".help\" for usage hints.\nD .quit\n```\n\n:::\n\nSo you have to go back to the terminal, run `.quit`, and then go back to R and try again. If you want to check what's in the database later, you have to disconnect from R, go to the terminal, run `duckdb -ui`, explore around in the browser, run `.quit` again, and go back to R.\n\n## DuckDB, {connections}, and the magical Connections Pane\n\nThere's a better way to do this though! RStudio and Positron both have a Connections Pane that lets you save and explore database connections, and it magically fixes the problem with concurrent connections to a database so you can explore a database from inside your R session without needing to remember to turn off the in-browser GUI.\n\nTo make this work, you need to use [the {connections} package](https://rstudio.github.io/connections/), which is mostly a wrapper around standard {DBI} connection functions.\n\nIf you connect to the database with {connections}…\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Regular DBI way---don't do this\n# con <- DBI::dbConnect(duckdb::duckdb(), db_file)\n\n# Fancy {connections} way---do this. It connects *and* adds the connection to the sidebar\nlibrary(connections)\ncon <- connection_open(duckdb::duckdb(), db_file)\n```\n:::\n\n\n…you'll automatically see a new connection in Positron's Connections Pane. Click on the little → arrow icon to open it:\n\n![Basic DuckDB connection](img/connection-basic.png){width=\"70%\"}\n\n…and you'll see all the tables inside!\n\n![Exploring DuckDB tables](img/connection-data-basic.png){width=\"70%\"}\n\nYou can explore the data with Positron's [Data Explorer](https://positron.posit.co/data-explorer.html) if you click on the little table icon:\n\n![Looking at the DuckDB table with Postrion's data explorer](img/connection-data-explorer.png){width=\"100%\"}\n\nAnd you can work with the database with R too, without running into concurrency issues:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Get stuff out of the database\ntbl(con, I(\"penguins\")) |> \n  filter(species == \"Adelie\") |> \n  collect()\n## # A tibble: 152 × 8\n##    species island    bill_len bill_dep flipper_len body_mass sex     year\n##    <fct>   <fct>        <dbl>    <dbl>       <int>     <int> <fct>  <int>\n##  1 Adelie  Torgersen     39.1     18.7         181      3750 male    2007\n##  2 Adelie  Torgersen     39.5     17.4         186      3800 female  2007\n##  3 Adelie  Torgersen     40.3     18           195      3250 female  2007\n##  4 Adelie  Torgersen     NA       NA            NA        NA <NA>    2007\n##  5 Adelie  Torgersen     36.7     19.3         193      3450 female  2007\n##  6 Adelie  Torgersen     39.3     20.6         190      3650 male    2007\n##  7 Adelie  Torgersen     38.9     17.8         181      3625 female  2007\n##  8 Adelie  Torgersen     39.2     19.6         195      4675 male    2007\n##  9 Adelie  Torgersen     34.1     18.1         193      3475 <NA>    2007\n## 10 Adelie  Torgersen     42       20.2         190      4250 <NA>    2007\n## # ℹ 142 more rows\n```\n:::\n\n\nWhen you're all done, disconnect from the database:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Regular DBI way---don't do this\n# DBI::dbDisconnect(con)\n\n# Fancy {connections} way---do this\nconnections::connection_close(con)\n```\n:::\n\n\n## Bonus: Better support for DuckDB in the Connections Pane\n\nThat Connections Pane connection is neat, but it's missing a little bit of extra metadata (like the location of the file), and it shows the columns using generic output, not with DuckDB-specific column types.\n\nDuckDB has fancier support for the Connections Pane, but for whatever reason, as of July 2025, [it's not enabled by default](https://github.com/posit-dev/positron/issues/6517#issuecomment-2690981100). If you set an option before connecting, though, you'll get a prettier DuckDB-specific connection with a nice icon, the file location, and more specific column types.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noptions(\"duckdb.enable_rstudio_connection_pane\" = TRUE)\ncon <- connections::connection_open(duckdb::duckdb(), db_file)\n```\n:::\n\n\n![Nicer DuckDB connection](img/connection-duckdb-nicer-connection.png){width=\"70%\"}\n\n![Nicer list of DuckDB tables](img/connection-duckdb-nicer-data.png){width=\"70%\"}\n\n## The whole game\n\nHere's what the overall process looks like for connecting to a database, adding data to it, querying it, closing the connection, and making a plot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# Use nicer DuckDB Connections Pane features\noptions(\"duckdb.enable_rstudio_connection_pane\" = TRUE)\n\n# Connect to an in-memory database, just for illustration\ncon <- connections::connection_open(duckdb::duckdb(), \":memory:\")\n\n# Add stuff to it\ncopy_to(\n  con,\n  gapminder::gapminder,\n  name = \"gapminder\",\n  overwrite = TRUE,\n  temporary = FALSE\n)\n## # Source:   table<gapminder> [?? x 6]\n## # Database: DuckDB v1.3.2 [root@Darwin 24.5.0:R 4.5.0/:memory:]\n##    country     continent  year lifeExp      pop gdpPercap\n##    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n##  1 Afghanistan Asia       1952    28.8  8425333      779.\n##  2 Afghanistan Asia       1957    30.3  9240934      821.\n##  3 Afghanistan Asia       1962    32.0 10267083      853.\n##  4 Afghanistan Asia       1967    34.0 11537966      836.\n##  5 Afghanistan Asia       1972    36.1 13079460      740.\n##  6 Afghanistan Asia       1977    38.4 14880372      786.\n##  7 Afghanistan Asia       1982    39.9 12881816      978.\n##  8 Afghanistan Asia       1987    40.8 13867957      852.\n##  9 Afghanistan Asia       1992    41.7 16317921      649.\n## 10 Afghanistan Asia       1997    41.8 22227415      635.\n## # ℹ more rows\n\n# Get stuff out of it\ngapminder_2007 <- tbl(con, I(\"gapminder\")) |>\n  filter(year == 2007) |>\n  collect()\n\n# All done\nconnections::connection_close(con)\n\n# Make a pretty plot, just for fun\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(aes(color = continent)) +\n  scale_x_log10(labels = scales::label_dollar(accuracy = 1)) +\n  scale_color_brewer(palette = \"Set1\") +\n  labs(\n    x = \"GDP per capita\",\n    y = \"Life expectancy\",\n    color = NULL,\n    title = \"This data came from a DuckDB database!\"\n  ) +\n  theme_minimal(base_family = \"Roboto Condensed\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nIt works, *and* it shows the in-memory database in the Connections Pane!\n\n![Exploring tables in an in-memory database](img/connection-in-memory.png){width=\"70%\"}\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}