{
  "hash": "5e3d0015628ebd1a8af8cba33f818c5d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Apple Music Wrapped with R\"\ndate: 2024-12-04\ndescription: \"Use R to parse Apple Music XML files and create your own Spotify Wrapped-like stats\"\nimage: \"img/social-image.png\"\ntwitter-card:\n  image: \"img/social-image.png\"\nopen-graph:\n  image: \"img/social-image.png\"\ncategories:\n  - r\n  - tidyverse\n  - music\ndoi: 10.59350/64kxj-xp130\ncitation: true\nshift-heading-level-by: 1\n---\n\n\n\n\n\n'Tis the season for Spotify Wrapped stats and I love it, both for seeing what everyone listens to and because it's such a cool way of presenting data. A few years ago on Twitter, [Caitlin](https://bsky.app/profile/beeonaposy.bsky.social) [Hudon](https://www.caitlinhudon.com/) noted that \n\n> Spotify Wrapped is a great example of how you can build a fantastic data product without maching learning or AI. ([\\@beeonaposy](https://x.com/beeonaposy/status/1334203860345208832?lang=en))\n\n![](img/caitlin-tweet.png){width=\"70%\" fig-align=\"center\"}\n\nAt its core, Spotify Wrapped is really just some grouped and summarized data—a [PivotTable](https://en.wikipedia.org/wiki/Pivot_table) with some album cover art slapped on. And it's fun and neat and everyone loves it!\n\nI've always been jealous of everyone's annual Spotify Wrapped reports, but since I don't use Spotify, [I've never gotten to see my own details](https://bsky.app/profile/andrew.heiss.phd/post/3kfe3pe32jm2g).\n\n![](img/me-bluesky-post.png){width=\"80%\" fig-align=\"center\"}\n\nBecause I'm an Elder Millennial and started listening to music in the days of Napster, I prefer to control my music files rather than stream it Spotify-style, so I get all my stuff from either the Amazon Music store or [Bandcamp](https://bandcamp.com/) since they both provide DRM-free MP3s. I listen to everything in the used-to-be-iTunes Music app (not to be confused with Apple's music streaming service, Apple Music), and I use [iTunes Match](https://support.apple.com/en-us/108935) to access my library across all my devices.^[I also have it all backed up to a [Plex](https://www.plex.tv/) server on a [Synology NAS](https://www.synology.com/en-us/products?product_line=ds_j,ds_value) in my house, and my kids listen to music on it through the [Plexamp app](https://www.plex.tv/plexamp/), but I don't because I still prefer using the iTunes/Apple Music desktop app 🤷‍♂️.]\n\niTunes/Music keeps track of some song metadata, like a count of the number of times a song has been played:\n\n![](img/itunes-metadata.png){width=\"80%\" fig-align=\"center\"}\n\nAll that metadata is stored in a big ol' gross XML file. In days of iTunes, you could find it at `~/Music/iTunes/iTunes Library.xml`; with Apple Music, it's hidden in `~/Music/Music/Music Library/Library.musicdb`. The easiest way to access it is to export a copy of it from Music with File > Library > Export Library…. It has a bunch of neat details about each file in your library:\n\n```xml\n<key>34813</key>\n<dict>\n\t<key>Track ID</key><integer>34813</integer>\n\t<key>Name</key><string>In Another Life</string>\n\t<key>Artist</key><string>The Killers</string>\n\t<key>Album Artist</key><string>The Killers</string>\n\t<key>Album</key><string>Pressure Machine</string>\n\t<key>Genre</key><string>Alternative Rock</string>\n\t<key>Kind</key><string>MPEG audio file</string>\n\t<key>Size</key><integer>7632215</integer>\n\t<key>Total Time</key><integer>225724</integer>\n\t<key>Disc Number</key><integer>1</integer>\n\t<key>Disc Count</key><integer>1</integer>\n\t<key>Track Number</key><integer>8</integer>\n\t<key>Track Count</key><integer>11</integer>\n\t<key>Year</key><integer>2021</integer>\n\t<key>Date Modified</key><date>2021-08-13T17:38:22Z</date>\n\t<key>Date Added</key><date>2021-08-13T13:38:36Z</date>\n\t<key>Bit Rate</key><integer>268</integer>\n\t<key>Sample Rate</key><integer>44100</integer>\n\t<key>Comments</key><string>Amazon.com Song ID: REDACTED</string>\n\t<key>Play Count</key><integer>97</integer>\n\t<key>Play Date</key><integer>3815892895</integer>\n\t<key>Play Date UTC</key><date>2024-12-01T15:14:55Z</date>\n\t<key>Rating</key><integer>100</integer>\n\t<key>Album Rating</key><integer>100</integer>\n\t<key>Album Rating Computed</key><true/>\n\t<key>Normalization</key><integer>6230</integer>\n\t<key>Artwork Count</key><integer>1</integer>\n\t<key>Sort Album Artist</key><string>Killers</string>\n\t<key>Sort Artist</key><string>Killers</string>\n\t<key>Persistent ID</key><string>211319FB11435185</string>\n\t<key>Track Type</key><string>File</string>\n\t<key>Location</key><string>file:///Users/andrew/Music/iTunes/iTunes%20Music/Music/The%20Killers/Pressure%20Machine/08%20In%20Another%20Life.mp3</string>\n\t<key>File Folder Count</key><integer>5</integer>\n\t<key>Library Folder Count</key><integer>1</integer>\n</dict>\n```\n\nIt keeps track of play count…\n\n```xml\n\t<key>Play Count</key><integer>97</integer>\n\t<key>Play Date</key><integer>3815892895</integer>\n\t<key>Play Date UTC</key><date>2024-12-01T15:14:55Z</date>\n```\n\n…but unfortunately for Spotify Wrapped purposes, it overwrites the count and date information when you listen to a track—it doesn't keep track of individual play counts. Here's what the XML for [\"In Another Life\"](https://www.youtube.com/watch?v=DcBVc0moMS4) looked like before I listened to the track while writing this post:\n\n```xml\n<key>Play Count</key><integer>96</integer>\n<key>Play Date</key><integer>3808562446</integer>\n<key>Play Date UTC</key><date>2024-09-07T18:00:46Z</date>\n```\n\nThat September 7th listen was erased from history once I hit play in December :(\n\nThat means it's impossible to figure out how many times you listen to a track during a given time period—the play count only shows the most recent listen. With one XML export, you can't find Spotify Wrapped-like details about listening habits in a single year.\n\nHowever, if you have *two* XML exports, you can!\n\n# Calculating 2024 play counts with R\n\nI played the long game this year and exported a copy of my iTunes/Music library on the morning of January 1 and stored the XML file in a folder on my computer. I then exported a copy of the library as it stands today. With these two library files, I can subtract the play count from January 1 from the play count today and find how many times I listened to each track. It still doesn't give me date information—there's no way to see time trends like what I was listening to in March or whatever^[If I were super on top of things and cared that much, I could set up a script to automatically export a copy of the library every day and then reverse engineer daily listening data, but that seems like an excessive amount of work.]—but it gives me good data to work with.\n\nIn the spirit of Caitlin's tweet, I'm going to keep the analysis of this data as simple and straightforward as possible—just filtering, grouping, and summarizing.\n\nThe only bit of fancy R work comes at the beginning with parsing and cleaning the Apple Music XML files. The track information is deeply nested inside a bunch of XML layers and untangling all that requires some data wrangling. Fortunatley Simon Couch already did it in [his 2022 analysis of his music](https://www.simonpcouch.com/blog/2022-12-01-listening-2022/), and he even made an [accompanying package {wrapped}](https://github.com/simonpcouch/wrapped) for doing it yourself. His package is designed to extract the play counts of all the music *added* in a given year, while I want the counts for all years, so I modified his `wrap_library()` function slightly to ignore the year argument and just parse everything. The modified function, now `read_itunes_library()` is below, for the morbidly curious:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"**R code for `read_itunes_library()`**\"}\n# Copied with tiiiiny modifications from Simon Couch's {wrapped}:\n#\n# - https://www.simonpcouch.com/blog/2022-12-01-listening-2022/\n# - https://github.com/simonpcouch/wrapped/blob/main/R/wrap_library.R\n\nlibrary(tidyverse)\n\nread_itunes_library <- function(path, year = 2022L) {\n  raw <- xml2::read_xml(path)\n  \n  res <- xml2::as_list(raw)\n  \n  res <- purrr::pluck(res, \"plist\", \"dict\", \"dict\")\n  \n  res <- res[names(res) != \"key\"]\n  \n  res <- \n    tibble::enframe(res) %>%\n    dplyr::rowwise() %>%\n    dplyr::mutate(value = list(tibble::enframe(value))) %>%\n    dplyr::ungroup() %>%\n    dplyr::mutate(id = dplyr::row_number()) %>%\n    dplyr::select(-name) %>%\n    tidyr::unnest(value) %>%\n    dplyr::mutate(\n      entry_id = (dplyr::row_number() + (dplyr::row_number() %% 2)) / 2\n    ) %>%\n    dplyr::rowwise() %>%\n    dplyr::mutate(value = dplyr::if_else(length(value) == 0L, list(list(NA)), list(value)),\n           value = unlist(value)) %>%\n    dplyr::ungroup() %>%\n    tidyr::pivot_wider(id_cols = c(id, entry_id), names_from = name, values_from = value, values_fn = list) %>%\n    tidyr::pivot_longer(cols = 4:ncol(.), names_to = \"type\", values_drop_na = TRUE) %>%\n    dplyr::select(-type) %>%\n    tidyr::pivot_wider(id_cols = id, names_from = key, values_from = value) %>%\n    janitor::clean_names() %>%\n    dplyr::select(id, track_title = name, artist, album_artist, album, genre, total_time, date_added, skip_count, play_count) %>%\n    dplyr::rowwise() %>%\n    dplyr::mutate(dplyr::across(everything(), ~dplyr::if_else(is.null(.x), list(NA), list(.x)))) %>%\n    dplyr::mutate(dplyr::across(everything(), unlist)) %>%\n    dplyr::mutate(\n      date_added = strsplit(date_added, \"T\"),\n      date_added = date_added[1],\n      date_added = lubridate::ymd(date_added),\n      skip_count = as.numeric(skip_count),\n      play_count = as.numeric(play_count),\n      total_time = as.numeric(total_time)\n    ) %>%\n    dplyr::ungroup() %>%\n    # dplyr::filter(lubridate::year(date_added) %in% year) %>%\n    dplyr::arrange(dplyr::desc(play_count))\n\n  res\n}\n```\n:::\n\n\n\n```r\nlibrary(tidyverse)\n\n# Copy this function from the text earlier \nread_itunes_library <- function(...) {...}\n\nmusic_january <- read_itunes_library(\"Library_2024-01-01.xml\")\nmusic_december <- read_itunes_library(\"Library_2024-12-04.xml\")\n```\n\n\n\n\n\n\n\nHere's what that data looks like:[^minecraft]\n\n[^minecraft]: My most recent Bandcamp purchases were the two Minecraft soundtracks ([Volume Alpha](https://c418.bandcamp.com/album/minecraft-volume-alpha) and [Volume Beta](https://c418.bandcamp.com/album/minecraft-volume-beta)) for my Minecraft-obsessed kids, hence those tracks in the `glimpse()` output there.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(music_december)\n## Rows: 11,691\n## Columns: 10\n## $ id           <int> 12138, 12135, 12136, 12137, 12139, 12140, 12141, 12142, 12143, 12144, 12145, 12146, 12147, 12148, 12149, 12150, 12151, 12152, 12153, 12154, 12155, 12156, 12157, 12158, 12159, 12160, 12161, 12162, 12163, 12164, 12165, 12166, 12167, 12168, 12169, 12170, 12171, 12172, 12173, 1217…\n## $ track_title  <chr> \"Living Mice\", \"Door\", \"Subwoofer Lullaby\", \"Death\", \"Moog City\", \"Haggstrom\", \"Minecraft\", \"Oxygène\", \"Équinoxe\", \"Mice on Venus\", \"Dry Hands\", \"Wet Hands\", \"Clark\", \"Chris\", \"Thirteen\", \"Excuse\", \"Sweden\", \"Key\", \"Cat\", \"Dog\", \"Danny\", \"Beginning\", \"Droopy likes ricochet\", \"…\n## $ artist       <chr> \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418…\n## $ album_artist <chr> \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418…\n## $ album        <chr> \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha…\n## $ genre        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Classical\", \"Classical\", \"Classical\", \"Classical\", \"Classica…\n## $ total_time   <dbl> 177554, 111490, 208640, 41560, 160052, 204068, 254066, 65201, 114938, 281573, 68571, 90070, 191817, 87823, 176561, 124055, 215562, 65071, 186305, 145815, 254563, 102164, 96287, 116819, 603062, 296071, 332564, 170396, 180062, 254249, 378122, 185077, 361743, 239438, 244950, 3100…\n## $ date_added   <date> 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, …\n## $ skip_count   <dbl> NA, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 1, NA, NA, NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 1, NA, NA, N…\n## $ play_count   <dbl> 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n:::\n\n\n\nThere are columns for iTunes/Music's internal track ID, a bunch of track metadata like title, artist, album, genre, and date added, and columns for the skip count and play count. Those are all columns Simon decided to include with his {wrapper} package—if you modify the `read_itunes_library()` function from earlier, you can keep any of the metadata that Music keeps track of.\n\nWith library data from both January and December loaded, I next combine them into one dataset with the total number of plays in 2024. This requires a tiny bit of data wrangling: I rename the play count column in the December data, join the January data to it, rename the January play count column, recode missing play counts as 0, and find the difference between play counts in December and January:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmusic_2024 <- music_december |> \n  # Rename the column of December play counts\n  rename(play_count_end = play_count) |>\n  # Merge in the play count column from the January 1 data\n  left_join(\n    music_january |> select(id, play_count_start = play_count),\n    by = join_by(id)\n  ) |> \n  # Tracks that were added in 2024 don't show up in music_january, so they appear \n  # in the merged data as NA. This recodes them as 0, which makes it so I can \n  # do math with them in the next step\n  replace_na(list(play_count_start = 0, play_count_end = 0)) |> \n  # Calculate the difference between December and January play counts\n  mutate(play_count_2024 = play_count_end - play_count_start)\n```\n:::\n\n\n\nLet's see what the merged data looks like really quick:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(music_2024)\n## Rows: 11,691\n## Columns: 12\n## $ id               <int> 12138, 12135, 12136, 12137, 12139, 12140, 12141, 12142, 12143, 12144, 12145, 12146, 12147, 12148, 12149, 12150, 12151, 12152, 12153, 12154, 12155, 12156, 12157, 12158, 12159, 12160, 12161, 12162, 12163, 12164, 12165, 12166, 12167, 12168, 12169, 12170, 12171, 12172, 12173, …\n## $ track_title      <chr> \"Living Mice\", \"Door\", \"Subwoofer Lullaby\", \"Death\", \"Moog City\", \"Haggstrom\", \"Minecraft\", \"Oxygène\", \"Équinoxe\", \"Mice on Venus\", \"Dry Hands\", \"Wet Hands\", \"Clark\", \"Chris\", \"Thirteen\", \"Excuse\", \"Sweden\", \"Key\", \"Cat\", \"Dog\", \"Danny\", \"Beginning\", \"Droopy likes ricochet…\n## $ artist           <chr> \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"…\n## $ album_artist     <chr> \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"C418\", \"…\n## $ album            <chr> \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume Alpha\", \"Minecraft - Volume A…\n## $ genre            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Classical\", \"Classical\", \"Classical\", \"Classical\", \"Clas…\n## $ total_time       <dbl> 177554, 111490, 208640, 41560, 160052, 204068, 254066, 65201, 114938, 281573, 68571, 90070, 191817, 87823, 176561, 124055, 215562, 65071, 186305, 145815, 254563, 102164, 96287, 116819, 603062, 296071, 332564, 170396, 180062, 254249, 378122, 185077, 361743, 239438, 244950, …\n## $ date_added       <date> 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-29, 2024-11-…\n## $ skip_count       <dbl> NA, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 1, NA, NA, NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 1, NA, N…\n## $ play_count_end   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 17, 16, 15, 15, 1…\n## $ play_count_start <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n## $ play_count_2024  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 17, 16, 15, 15, 1…\n```\n:::\n\n\n\nThat new `play_count_2024` column is the main thing I'm interested in—I can summarize it a bunch of different ways.\n\n# Minutes listened\n\nThere's a column for `total_time` that's measured in milliseconds. I can multiply it by the play count and do some division to figure out a rough count of the total number of minutes listened. It's not 100% accurate since it doesn't account for partial listens, but it's close enough.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmusic_2024 |> \n  mutate(time_plays = total_time * play_count_2024) |> \n  summarize(total_ms = sum(time_plays)) |> \n  mutate(total_minutes = total_ms / 1000 / 60)\n## # A tibble: 1 × 2\n##    total_ms total_minutes\n##       <dbl>         <dbl>\n## 1 891497777        14858.\n```\n:::\n\n\n\n# New music\n\nHere's all the new music I added in 2024:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nadded_2024 <- music_2024 |> \n  mutate(year_added = year(date_added)) |> \n  filter(year_added == 2024) |> \n  distinct(album_artist, album, date_added)\n\nadded_2024 |> \n  arrange(date_added) |> \n  print(n = Inf)\n## # A tibble: 30 × 3\n##    album_artist       album                                                                                   date_added\n##    <chr>              <chr>                                                                                   <date>    \n##  1 boygenius          the record [Explicit]                                                                   2024-02-05\n##  2 Olivia Rodrigo     GUTS (spilled) [Explicit]                                                               2024-03-23\n##  3 The Avett Brothers The Avett Brothers                                                                      2024-03-23\n##  4 The Decemberists   As It Ever Was, So It Will Be Again                                                     2024-03-23\n##  5 Lauren Mayberry    Change Shapes                                                                           2024-03-23\n##  6 Lauren Mayberry    Shame                                                                                   2024-03-23\n##  7 Nils Frahm         Day                                                                                     2024-04-09\n##  8 Taylor Swift       THE TORTURED POETS DEPARTMENT: THE ANTHOLOGY [Explicit]                                 2024-04-19\n##  9 Taylor Swift       THE TORTURED POETS DEPARTMENT [Explicit]                                                2024-04-19\n## 10 The Avett Brothers The Avett Brothers                                                                      2024-05-17\n## 11 Lindsey Stirling   Duality                                                                                 2024-06-18\n## 12 The Decemberists   As It Ever Was, So It Will Be Again                                                     2024-06-18\n## 13 Bits & Hits        Lord of The Rings but it's lofi beats                                                   2024-07-28\n## 14 Bits & Hits        Zelda but it's lofi beats                                                               2024-07-28\n## 15 Bits & Hits        Minecraft but it's lofi beats                                                           2024-07-28\n## 16 Sabrina Carpenter  Short n' Sweet [Explicit]                                                               2024-08-05\n## 17 Chappell Roan      The Rise and Fall of a Midwest Princess [Explicit]                                      2024-08-13\n## 18 Sabrina Carpenter  Short n' Sweet [Explicit]                                                               2024-08-23\n## 19 Eydís Evensen      The Light                                                                               2024-09-25\n## 20 Bear McCreary      The Lord of the Rings: The Rings of Power (Season 2: Amazon Original Series Soundtrack) 2024-10-07\n## 21 Dua Lipa           Radical Optimism [Explicit]                                                             2024-10-27\n## 22 Laufey             Bewitched: The Goddess Edition [Explicit]                                               2024-11-05\n## 23 Laufey             Everything I Know About Love                                                            2024-11-05\n## 24 Laufey             Typical of Me EP                                                                        2024-11-05\n## 25 Laufey             Bewitched                                                                               2024-11-05\n## 26 Anna Lapwood       Images                                                                                  2024-11-11\n## 27 Anna Lapwood       Luna                                                                                    2024-11-11\n## 28 Chappell Roan      Good Luck, Babe!                                                                        2024-11-11\n## 29 C418               Minecraft - Volume Alpha                                                                2024-11-29\n## 30 C418               Minecraft - Volume Beta                                                                 2024-11-29\n```\n:::\n\n\n\n# Top songs\n\nAnd here are the top songs:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntop_played <- music_2024 |> \n  select(track_title, artist, play_count_2024) |> \n  arrange(desc(play_count_2024))\n\ntop_played\n## # A tibble: 11,691 × 3\n##    track_title                                   artist                                       play_count_2024\n##    <chr>                                         <chr>                                                  <dbl>\n##  1 love is embarrassing [Explicit]               Olivia Rodrigo                                            42\n##  2 New Romantics (Taylor's Version)              Taylor Swift                                              35\n##  3 Dreaming of Light                             Eydís Evensen                                             33\n##  4 Espresso [Explicit]                           Sabrina Carpenter                                         32\n##  5 Bewitched                                     Laufey                                                    31\n##  6 Please Please Please [Explicit]               Sabrina Carpenter                                         30\n##  7 Anna's Theme                                  Eydís Evensen                                             26\n##  8 All You Had To Do Was Stay (Taylor's Version) Taylor Swift                                              26\n##  9 Shake It Off (Taylor's Version)               Taylor Swift                                              26\n## 10 The Light II                                  Eydís Evensen;Schola Cantorum Reykjavicensis              23\n## # ℹ 11,681 more rows\n```\n:::\n\n\n\n# Top artists\n\nAnd the top artists:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntop_artists <- music_2024 |> \n  group_by(artist) |> \n  summarize(play_count = sum(play_count_2024)) |> \n  arrange(desc(play_count))\n\ntop_artists\n## # A tibble: 1,851 × 2\n##    artist             play_count\n##    <chr>                   <dbl>\n##  1 Taylor Swift              484\n##  2 Laufey                    384\n##  3 Olivia Rodrigo            281\n##  4 Eydís Evensen             249\n##  5 Bear McCreary             234\n##  6 The Decemberists          214\n##  7 Hans Zimmer               188\n##  8 Sabrina Carpenter         151\n##  9 The Avett Brothers        149\n## 10 Nicholas Britell          148\n## # ℹ 1,841 more rows\n```\n:::\n\n\n\n# Top albums\n\nAnd the top albums. This is a little trickier since Music doesn't keep track of full album listens (and I don't think Spotify does that either), so it's a count of the number of tracks played in the album. That means the count is biased towards longer albums like *1989* (21 tracks) or the *Rings of Power* soundtrack (40 tracks). But it's still a helpful overview:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntop_albums <- music_2024 |> \n  group_by(album, artist) |> \n  summarize(count_of_tracks_played_in_album = sum(play_count_2024)) |> \n  arrange(desc(count_of_tracks_played_in_album))\ntop_albums\n## # A tibble: 2,434 × 3\n## # Groups:   album [992]\n##    album                                                                                     artist             count_of_tracks_played_in_album\n##    <chr>                                                                                     <chr>                                        <dbl>\n##  1 1989 (Taylor's Version)                                                                   Taylor Swift                                   399\n##  2 GUTS (spilled) [Explicit]                                                                 Olivia Rodrigo                                 336\n##  3 Bewitched: The Goddess Edition [Explicit]                                                 Laufey                                         244\n##  4 The Light                                                                                 Eydís Evensen                                  216\n##  5 Short n' Sweet [Explicit]                                                                 Sabrina Carpenter                              151\n##  6 The Lord of the Rings: The Rings of Power (Season One: Amazon Original Series Soundtrack) Bear McCreary                                  131\n##  7 Interstellar: Original Motion Picture Soundtrack (Deluxe Version)                         Hans Zimmer                                    108\n##  8 The Lord of the Rings: The Rings of Power (Season 2: Amazon Original Series Soundtrack)   Bear McCreary                                  103\n##  9 The Avett Brothers                                                                        The Avett Brothers                              93\n## 10 8th Wonder                                                                                The National Parks                              84\n## # ℹ 2,424 more rows\n```\n:::\n\n\n\n# Final images\n\nThis is all ugly console output, so finally, I whipped up a couple Wrapped-esque images in Illustrator with the statistics;\n\n![Top artists and total mintues](img/apple-music-wrapped-summary.png){width=\"80%\" fig-align=\"center\"}\n\n![Top songs](img/apple-music-wrapped-top-songs.png){width=\"80%\" fig-align=\"center\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}